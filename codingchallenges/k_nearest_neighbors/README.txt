Second attempt at Squarespace coding challenge


==Thought process==

Recently, I had learned in class about using naive bayes as a binary classifier. I really wanted to implement one so I decided to use the Gaussian Naive Bayes assumption where each feature is assumed to be in some normal distribution. I decided to implementing everything without using outside libraries and it took about 2 hour time. I wanted to get the accuracy of my model, so I split up the traininig data into a 80 / 20 split and got the percentage of correctness. Results showed 60% accuracy, which is not that surprising since a lot of the features (such as income) are obviously not normally distributed. 

Initial attempt code is uploaded here: https://github.com/hongj77/coding-practice/tree/master/forfun/naive_bayes


My next step was to move onto a model that did not hold any assumptions. The simplest one I knew wa K-nearest neighbors. With this classifier, I was aiming at ~80% accuracy. Implementation was simple so I decided not to use any outside libraries, which took about 1 hour time. Again I proceeded with the 80 / 20 split, and also adjusted the k values to get the following results:

k values -> accuracy
1 -> 64%
5 -> 72%
10 -> 73.9%
15 -> 73.9%
25 -> 73.4%
50 -> 72.5%


I concluded that the accuracy could improve if the closest neighbors had more weight applied to them instead of simply taking the majority vote of the neighbors, but that is a project for another day.


==How to run==

$> python knn.py

Right now, the main class is hardcoded to train from "train_potus_by_county.csv" and test with "test_potus_by_county.csv". I noticed that the test file did not have the correct classifications appended with the data, so right now the main function just returns a list of the predictions where prediction[i] holds the prediction of row i of the test csv file. So if you want to test the accuracy of the model, you will have to use the predictions array in any way it is fit.








The assignment is outlined below:



Predicting County Presidential Winners


We have included a data file for training named train_potus_by_county.csv which includes some metadata about a county
and who won in that county's election. You job is to create a model that correctly predicts who won in that county.


Your completed homework answer should require no more than 2 hours of work and be a zipfile with the following:

1) build_model script: should read train_potus_by_county.csv and then build, train and tune your best predictive model.
The script should save your best model to the filesystem and it should also log data about the expected performance of
the model to a text file performance.txt

2) make_predictions script: should load your saved model generated by the first script, read the file test_potus_by_county.csv
and output a predictions.csv file with your predictions (one prediction per line)

3) model binary: serialized version of your best model from running step 1

4) predictions.csv: one prediction per line that is in the same order as test_potus_by_county.csv

5) performance.txt: the data about the expected performance of your model, how you evaluated the best model

6) notes.txt: should include the software dependencies for your code, optionally any notes about how you chose your model, 
how you engineered your features, what other options you wanted to explore but didn't have time.



Feel free to use whatever standard machine learning packages you'd like. Please only use software that's easy to install
so we can validate your work.

Do not use additional data from the internet. However you can derive new features from the existing data.

The homework will be judged based upon the performance of the model, the quality/clarity of the code, and finally the
methodology of the best feature/model selection.
